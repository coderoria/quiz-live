doctype html
html(lang="de")
    head
        meta(charset="UTF-8")
        meta(http-equiv="X-UA-Compatible", content="IE=edge")
        meta(name="viewport", content="width=device-width, initial-scale=1.0")
        link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css")
        script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js") 
        script(src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js") 
        link(rel="stylesheet", href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css")
        script(src="//cdn.jsdelivr.net/npm/sweetalert2@11") 
        title Game Controller
    body.bg-dark.text-light(style="overflow:hidden;")
        div.col-12.col-md-3.mx-auto.question-container(style="position:absolute;top:50vh;left:50vw;transform:translateX(-50%) translateY(-50px);")
        div(style="position:absolute;top:50vh;left:calc(50vw - 12.5vw);transform:translateY(-200%) translateX(-100%);")
            div(style="display: flex")
                button.btn.btn-primary.me-3 Test
                button.btn.fa-solid.fa-eye.show-question(style="background-color:rgb(13,110,253);border-color:rgb(13,110,253);")
    script(src="/socket.io/socket.io.js") 
    script(src="/js/anime.min.js") 
    script.
        const socket = io("/admin");

        socket.emit("sendTest");

        let questionTemplate = `
            <div class="pt-5 question" data-qid="{qid}">
                <div class="text-center" style="color:rgb(108, 117, 125)">
                    <span class="question-text">{question}</span>
                </div>
                <div class="text-center pt-2 text-left">
                    <div style="display:flex;">
                        <button class="btn mx-1" style="width:50%;background-color:rgb(108,117,125);border-color:rgb(108,117,125);" data-aid="0">A {answerOne}</button>
                        <button class="btn mx-1" style="width:50%;background-color:rgb(108,117,125);border-color:rgb(108,117,125);" data-aid="1">B {answerTwo}</button>
                    </div>
                    <div style="display:flex;" class="mt-2">
                        <button class="btn mx-1" style="width:50%;background-color:rgb(108,117,125);border-color:rgb(108,117,125);" data-aid="2">C {answerThree}</button>
                        <button class="btn mx-1" style="width:50%;background-color:rgb(108,117,125);border-color:rgb(108,117,125);" data-aid="3">D {answerFour}</button>
                    </div>
                </div>
            </div>
        `;

        socket.on("stateUpdate", (data) => {
            // Add questions to DOM
            let html = ``;
            for(let question of data.questions) {
                let i = data.questions.indexOf(question);
                html += questionTemplate.replaceAll("{question}", question.question)
                    .replaceAll("{qid}", i).replaceAll("{answerOne}", question.answerOne)
                    .replaceAll("{answerTwo}", question.answerTwo)
                    .replaceAll("{answerThree}", question.answerThree)
                    .replaceAll("{answerFour}", question.answerFour);
            }
            $(".question-container").html(html);

            let offset = 0;
            for(let i in data.questions) {
                /** Calculate offset to scroll to
                **/
                if(i <= data.currentQuestion) {
                    offset += $(`[data-qid=${i}]`)[0].clientHeight;
                }
                if(i == data.currentQuestion && data.questionVisible) {
                    // paint current question buttons
                    anime({
                        targets: $('[data-qid='+i+'] div button').get(),
                        "background-color": "#0d6efd",
                        "border-color"  : "#0d6efd",
                    });
                    // paint current question text
                    anime({
                        targets: $('[data-qid='+i+'] div').get(0),
                        "color": "rgb(248, 249, 250)"
                    });

                    // event listener for current answers
                    $(`[data-qid=${i}] div button`).on("click", (event) => {
                        Swal.fire({
                            icon: "warning",
                            title: "Wirklich einloggen?",
                            text: "Die Antwort kann nicht mehr geändert werden",
                            timer: 3000,
                            showConfirmButton: true,
                            showCancelButton: true,
                            timerProgressBar: true,
                            confirmButtonText: "Auswählen",
                            cancelButtonText: "Abbrechen",
                            customClass: {
                                confirmButton: "btn btn-warning me-2",
                                cancelButton: "btn btn-secondary ms-2",
                            },
                            buttonsStyling: false,
                        }).then((result) => {
                            if(result.isDismissed && result.dismiss != "timer") {
                                return;
                            }
                            socket.emit("selectAnswer", $(event.target).data("aid"));
                        });
                    });
                }
            }
            // animate questions to scroll to current one
            anime({
                targets: '.question-container',
                translateY: '-'+offset+'px'
            });

            // color selected answer and other answers
            if(data.selectedAnswer != null) {
                let aid = data.selectedAnswer;
                let qid = data.currentQuestion;
                $(`[data-qid=${qid}] div button`).off();

                anime({
                    targets: $(`[data-qid=${qid}] div button`).not(`[data-aid=${aid}]`).get(),
                    "background-color": "rgb(108,117,125)",
                    "border-color": "rgb(108,117,125)"
                });
                anime({
                    targets: $(`[data-qid=${qid}] div [data-aid=${aid}]`).get(),
                    "background-color": "rgb(255, 193, 7)",
                    "border-color": "rgb(255, 193, 7)"
                });
            }

            // change visibility button
            if(data.questionVisible) {
                $(`.show-question`).removeClass("fa-eye").addClass("fa-eye-slash");
                anime({
                    targets: '.show-question',
                    "background-color": "rgb(108,117,125)",
                    "border-color": "rgb(108,117,125)"
                })
            }else {
                $(`.show-question`).removeClass("fa-eye-slash").addClass("fa-eye");
                anime({
                    targets: '.show-question',
                    "background-color": "rgb(13,110,253)",
                    "border-color": "rgb(13,110,253)"
                })
            }

            // visibility button listener
            $(".show-question").on("click", (event) => {
                if(data.questionVisible) {
                    return;
                }
                socket.emit("showQuestion");
            });
        });